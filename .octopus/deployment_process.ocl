step "prepare-feature-deployment" {
    name = "Prepare Feature Deployment"
    properties = {
        Octopus.Action.TargetRoles = "do-k8s-anita"
    }

    action "getfn" {
        action_type = "Octopus.Script"
        channels = ["development"]
        environments = ["development"]
        name = "GetFN"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Get the release number from Octopus variable
                release_number=$(get_octopusvariable "RELEASE_NUMBER")
                
                # Extract the feature name using regex
                if [[ $release_number =~ ^[0-9]+\.[0-9]+\.[0-9]+-([^.]+)\.[0-9]+$ ]]; then
                    feature_name="${BASH_REMATCH[1]}"
                else
                    echo "Error: Failed to extract feature name from RELEASE_NUMBER: $release_number"
                    exit 1
                fi
                
                # Export the extracted feature name as an Octopus variable
                set_octopusvariable "FeatureName" "$feature_name"
                
                # Optional: Print the extracted feature name for debugging purposes
                echo "Extracted Feature Name: $feature_name"
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = ""

        packages "Observability-Demo" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Observability-Demo"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }

    action "create-dns-entry-with-doctl" {
        action_type = "Octopus.Script"
        channels = ["development"]
        environments = ["development"]
        name = "Create DNS entry with doctl"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.SubstituteInFiles"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.PackageId = "Observability-Demo"
            Octopus.Action.Script.ScriptFileName = "createDNSentry.sh"
            Octopus.Action.Script.ScriptSource = "Package"
            Octopus.Action.SubstituteInFiles.TargetFiles = <<-EOT
                *.sh
                */*.yaml
                EOT
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.3.0-ubuntu.22.04"
        }

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Observability-Demo"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "do-k8s-anita"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        channels = ["development", "main", "release", "test"]
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "*/*.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{NAMESPACE}"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.Package.PackageId = "Observability-Demo"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Observability-Demo"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}